module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { HOConfig: peg$parseHOConfig },
        peg$startRuleFunction  = peg$parseHOConfig,

        peg$c0 = function(object) {return object},
        peg$c1 = { type: "other", description: "whitespace" },
        peg$c2 = "\t",
        peg$c3 = { type: "literal", value: "\t", description: "\"\\t\"" },
        peg$c4 = "\x0B",
        peg$c5 = { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
        peg$c6 = "\f",
        peg$c7 = { type: "literal", value: "\f", description: "\"\\f\"" },
        peg$c8 = " ",
        peg$c9 = { type: "literal", value: " ", description: "\" \"" },
        peg$c10 = "\xA0",
        peg$c11 = { type: "literal", value: "\xA0", description: "\"\\xA0\"" },
        peg$c12 = "\uFEFF",
        peg$c13 = { type: "literal", value: "\uFEFF", description: "\"\\uFEFF\"" },
        peg$c14 = /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,
        peg$c15 = { type: "class", value: "[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]", description: "[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]" },
        peg$c16 = /^[\n\r\u2028\u2029]/,
        peg$c17 = { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
        peg$c18 = peg$FAILED,
        peg$c19 = "#",
        peg$c20 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c21 = [],
        peg$c22 = void 0,
        peg$c23 = { type: "any", description: "any character" },
        peg$c24 = { type: "other", description: "end of line" },
        peg$c25 = "\n",
        peg$c26 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c27 = "\r\n",
        peg$c28 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c29 = "\r",
        peg$c30 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c31 = "\u2028",
        peg$c32 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c33 = "\u2029",
        peg$c34 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c35 = ",",
        peg$c36 = { type: "literal", value: ",", description: "\",\"" },
        peg$c37 = ":",
        peg$c38 = { type: "literal", value: ":", description: "\":\"" },
        peg$c39 = "=",
        peg$c40 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c41 = "{",
        peg$c42 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c43 = "}",
        peg$c44 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c45 = "[",
        peg$c46 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c47 = "]",
        peg$c48 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c49 = function(m) {return m},
        peg$c50 = function(first, rest) {
              var result = {}, i
              result[first.name] = first.value
              for (i = 0; i< rest.length; i++){
                result[rest[i].name] = rest[i].value
              }
              return result
            },
        peg$c51 = function(name, value) {
              return { name: name, value: value };
            },
        peg$c52 = "false",
        peg$c53 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c54 = function() { return false; },
        peg$c55 = "null",
        peg$c56 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c57 = function() { return null;  },
        peg$c58 = "true",
        peg$c59 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c60 = function() { return true;  },
        peg$c61 = { type: "other", description: "number" },
        peg$c62 = null,
        peg$c63 = function() { return parseFloat(text()); },
        peg$c64 = ".",
        peg$c65 = { type: "literal", value: ".", description: "\".\"" },
        peg$c66 = /^[1-9]/,
        peg$c67 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c68 = /^[eE]/,
        peg$c69 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c70 = "-",
        peg$c71 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c72 = "+",
        peg$c73 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c74 = "0",
        peg$c75 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c76 = function(v) { return v; },
        peg$c77 = function(first, rest) { return [first].concat(rest); },
        peg$c78 = function(values) { return values !== null ? values : []; },
        peg$c79 = { type: "other", description: "string" },
        peg$c80 = function(chars) { return chars.join(""); },
        peg$c81 = { type: "other", description: "automatically parse string" },
        peg$c82 = /^[^="':{}[\]\t\n\r #,]/,
        peg$c83 = { type: "class", value: "[^=\"':{}[\\]\\t\\n\\r #,]", description: "[^=\"':{}[\\]\\t\\n\\r #,]" },
        peg$c84 = function(name) {
            literal = name.join("")
            if(!isNaN(literal)){
              return parseFloat(literal) 
            }

            if(literal.toLowerCase() == 'false'){
              return false
            }
            if(literal.toLowerCase() == 'true'){
              return true
            }
            if(literal.toLowerCase() == 'null'){
              return null
            }

            return literal;
          },
        peg$c85 = { type: "other", description: "identifier" },
        peg$c86 = /^[a-zA-Z0-9_.\-]/,
        peg$c87 = { type: "class", value: "[a-zA-Z0-9_.\\-]", description: "[a-zA-Z0-9_.\\-]" },
        peg$c88 = function(name) {return name.join("")},
        peg$c89 = /^[^"]/,
        peg$c90 = { type: "class", value: "[^\"]", description: "[^\"]" },
        peg$c91 = /^[^']/,
        peg$c92 = { type: "class", value: "[^']", description: "[^']" },
        peg$c93 = "\"",
        peg$c94 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c95 = "'",
        peg$c96 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c97 = "\\",
        peg$c98 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c99 = /^[0-9]/,
        peg$c100 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c101 = /^[0-9a-f]/i,
        peg$c102 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseHOConfig() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseobject();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseWhiteSpace() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c2;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11) {
          s0 = peg$c4;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12) {
            s0 = peg$c6;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s0 = peg$c8;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 160) {
                s0 = peg$c10;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 65279) {
                  s0 = peg$c12;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c13); }
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parseZs();
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }

      return s0;
    }

    function peg$parseZs() {
      var s0;

      if (peg$c14.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (peg$c16.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }

      return s0;
    }

    function peg$parseLineComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c19;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c22;
        } else {
          peg$currPos = s4;
          s4 = peg$c18;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c18;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c18;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseLineTerminator();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c22;
          } else {
            peg$currPos = s4;
            s4 = peg$c18;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c23); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c18;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c18;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }

      return s0;
    }

    function peg$parseLineTerminatorSequence() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c25;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c27) {
          s0 = peg$c27;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c29;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c31;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c33;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLineComment();
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseLineComment();
        }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLineTerminatorSequence();
        if (s1 === peg$FAILED) {
          s1 = peg$parseLineComment();
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseLineTerminatorSequence();
          if (s1 === peg$FAILED) {
            s1 = peg$parseLineComment();
          }
        }
      }

      return s0;
    }

    function peg$parsevalueSeparator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLineTerminatorSequence();
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c35;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }

      return s0;
    }

    function peg$parsenameSeparator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c37;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c39;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c40); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }

      return s0;
    }

    function peg$parsebeginObject() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 123) {
        s0 = peg$c41;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }

      return s0;
    }

    function peg$parseendObject() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 125) {
        s0 = peg$c43;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }

      return s0;
    }

    function peg$parsebeginArray() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 91) {
        s0 = peg$c45;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }

      return s0;
    }

    function peg$parseendArray() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 93) {
        s0 = peg$c47;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }

      return s0;
    }

    function peg$parseobject() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemember();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsevalueSeparator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsemember();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s4;
              s5 = peg$c49(s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c18;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c18;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsevalueSeparator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsemember();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c49(s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c18;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c18;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c50(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c18;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }

      return s0;
    }

    function peg$parsemember() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenameSeparator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalue();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c51(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }

      return s0;
    }

    function peg$parseinnerObject() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsebeginObject();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseobject();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseendObject();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }

      return s0;
    }

    function peg$parsevalue() {
      var s0;

      s0 = peg$parsestring();
      if (s0 === peg$FAILED) {
        s0 = peg$parseinnerObject();
        if (s0 === peg$FAILED) {
          s0 = peg$parsearray();
        }
      }

      return s0;
    }

    function peg$parsefalse() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c52) {
        s1 = peg$c52;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c54();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenull() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c55) {
        s1 = peg$c55;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c57();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetrue() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c58) {
        s1 = peg$c58;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c60();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseminus();
      if (s1 === peg$FAILED) {
        s1 = peg$c62;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefrac();
          if (s3 === peg$FAILED) {
            s3 = peg$c62;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexp();
            if (s4 === peg$FAILED) {
              s4 = peg$c62;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c63();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c18;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }

      return s0;
    }

    function peg$parsedecimal_point() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c64;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }

      return s0;
    }

    function peg$parsedigit1_9() {
      var s0;

      if (peg$c66.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }

      return s0;
    }

    function peg$parsee() {
      var s0;

      if (peg$c68.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }

      return s0;
    }

    function peg$parseexp() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsee();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseminus();
        if (s2 === peg$FAILED) {
          s2 = peg$parseplus();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c62;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseDIGIT();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseDIGIT();
            }
          } else {
            s3 = peg$c18;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }

      return s0;
    }

    function peg$parsefrac() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedecimal_point();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDIGIT();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDIGIT();
          }
        } else {
          s2 = peg$c18;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2, s3;

      s0 = peg$parsezero();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedigit1_9();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseDIGIT();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDIGIT();
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      }

      return s0;
    }

    function peg$parseminus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c70;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }

      return s0;
    }

    function peg$parseplus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c72;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }

      return s0;
    }

    function peg$parsezero() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c74;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }

      return s0;
    }

    function peg$parsearray() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsebeginArray();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsevalue();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parsevalueSeparator();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsevalue();
              if (s8 !== peg$FAILED) {
                peg$reportedPos = s6;
                s7 = peg$c76(s8);
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$c18;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c18;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parsevalueSeparator();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsevalue();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s6;
                  s7 = peg$c76(s8);
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c18;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c18;
              }
            }
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c77(s4, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c18;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c18;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c62;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseendArray();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c78(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c18;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c18;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsedoubleQuotation();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsedoubleQuotaChar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsedoubleQuotaChar();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedoubleQuotation();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c80(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c18;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesingleQuotation();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsesingleQuotaChar();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsesingleQuotaChar();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsesingleQuotation();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c80(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c18;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c18;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c18;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseautoParseString();
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }

      return s0;
    }

    function peg$parseautoParseString() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c82.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c82.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
        }
      } else {
        s1 = peg$c18;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c84(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c86.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c86.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c87); }
          }
        }
      } else {
        s1 = peg$c18;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c88(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }

      return s0;
    }

    function peg$parsedoubleQuotaChar() {
      var s0;

      if (peg$c89.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }

      return s0;
    }

    function peg$parsesingleQuotaChar() {
      var s0;

      if (peg$c91.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }

      return s0;
    }

    function peg$parsedoubleQuotation() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c93;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }

      return s0;
    }

    function peg$parsesingleQuotation() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c95;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }

      return s0;
    }

    function peg$parseescape() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c97;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }

      return s0;
    }

    function peg$parseDIGIT() {
      var s0;

      if (peg$c99.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }

      return s0;
    }

    function peg$parseHEXDIG() {
      var s0;

      if (peg$c101.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
